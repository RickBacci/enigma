require 'Date'
require './lib/key'
require './lib/date_offset'


class Encrypt
  attr_reader :character_map, :message_file, :encrypted_file, :offsets
  attr_reader :encryption_key, :sliced, :date_offset

  def initialize(message_file, encrypted_file='encrypted.txt')
    @character_map = 'abcdefghijklmnopqrstuvwxyz0123456789 .,'.split('')
    #p @char_map = [*('a'..'z'), *('0'..'9'), ' ', '.', ',']

    @message_file = message_file || 'message.txt'
    @encrypted_file = encrypted_file || 'encrypted.txt'
    @msg_text = File.read(@message_file).strip
    @encryption_key = Key.generate

    today = Date.today.strftime('%d%m%y')
    @date_offset = DateOffset.generate(today)

    @sliced = sliced_msg(@msg_text)
  end

  def msg_text
    @msg_text
  end

  def date_offset
    @date_offset
  end

  def offsets
    {
      A: @date_offset[0].to_i + @encryption_key[0..1].to_i,
      B: @date_offset[1].to_i + @encryption_key[1..2].to_i,
      C: @date_offset[2].to_i + @encryption_key[2..3].to_i,
      D: @date_offset[3].to_i + @encryption_key[3..4].to_i
    }
  end

  def sliced_msg(msg_text)
    @msg_text.scan(/.{4}/)
  end





end

msg = Encrypt.new(ARGV[0], ARGV[1])




p msg.encryption_key
p msg.date_offset

#p msg.offsets
p msg.sliced_msg(msg.msg_text)

#@message_file = File.join(__dir__, message_file) || 'message.txt'









#puts "encryption key: #{msg.encryption_key}"
#puts "   date offset: #{msg.date_offset}"
#puts "  total offset: #{msg.total_offset(msg.encryption_key, msg.date_offset)}"












# attr_reader :message_file, :encrypted_file, :character_map
# attr_reader :encryption_key, :date_offset, :msg_text



#####      chars[chars.rotate(-2).index('h')]



# def sliced_msg
#   @msg_text.scan(/.{4}/)
# end
#
# def rotate(total_offset)
#   sliced_msg.zip(total_offset)
# end
#
#

# def initialize(msg_text, total_offset)
# end



# @total_offset = msg.total_offset(msg.encryption_key, msg.date_offset)
#
#
# p msg.message_file
# p msg.encrypted_file
# puts
# p msg.msg_text
#
# sliced = msg.sliced_msg
#
#
# # iterate over the characters in the message
# # for each character
# @character_map = [*('a'..'z'), *('0'..'9'), ' ', '.', ',']
#
# sl = sliced.map do |slice|
#       p slice.chars.map { |val| @character_map.index(val) }#.zip.(@total_offset)
#         #map { |val| @character_map.index(val) }.map { |v| p v }
#      end
# puts
#
# p 'sl zip total'
# p sl#.zip(@total_offset)
# p 'total zip sl'
# p @total_offset.zip(sl)
# #p msg.rotate(@total_offset)
#
#
# # sl = sliced.map do |slice|
# #   p slice.chars.map { |val| @character_map.index(val) }
# # end
